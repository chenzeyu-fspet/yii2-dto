<?php

namespace yii\dto;

use yii\base\Model;
use yii\dto\exception\DtoException;
use yii\helpers\Json;
use yii\helpers\StringHelper;
use JsonSerializable;
use ReflectionMethod;

/**
 * dto 对象抽象类
 * Class BaseDto
 *
 * @package yii\dto
 */
abstract class BaseDto extends Model implements JsonSerializable
{
    // 是否已强制转换
    private $is_strict_load = false;

    /**
     * 自定义load from json
     *
     * @date: 2020-07-11 21:05
     *
     * @param string $json
     *
     * @return mixed
     */
    abstract public function customLoadFromJson(string $json);

    /**
     * 自定义load
     *
     * @date: 2020-07-11 21:06
     *
     * @param $data
     *
     * @return mixed
     */
    abstract public function customLoad($data);


    /**
     * data strict load from json
     *
     * @date: 2020-06-17 19:31
     *
     * @param $json
     *
     * @throws \ReflectionException
     */
    public function strictLoadFromJson(string $json)
    {
        $metadata = Json::decode($json, true);
        $this->strictLoad($metadata);
    }

    /**
     * data strict load
     *
     * @date: 2020-06-17 19:18
     *
     * @param $data
     *
     * @throws \ReflectionException
     */
    public function strictLoad($data)
    {
        $this->load($data, '');
        if ( ! $this->validate()) {
            throw new DtoException(current($this->getErrors())[0]);
        }

        $this->setStrictValue();
        $this->is_strict_load = true;
    }

    /**
     * @date: 2020-06-17 19:30
     * @throws \ReflectionException
     */
    public function setStrictValue()
    {
        $vars = get_object_vars($this);
        foreach ($vars as $name => $value) {
            $setter = sprintf('set%s', $this->parseName($name, 1));
            if ( ! method_exists($this, $setter)) {
                $this->$name = $value;
                continue;
            }

            $method = new ReflectionMethod($this, $setter);
            $number = $method->getNumberOfParameters();
            if (0 === $number || 1 != $number) {
                throw new DtoException('Dto Set Method Params must be one!');
            }

            $param = $method->getParameters()[0];
            $type  = $param->getType();
            $value = is_null($value) ? $this->getDefaultValue($type) : $value;
            if (is_null($value) || is_object($value)) {
                $this->$name = $value;
            } else {
                $this->{$setter}($value);
            }
        }
    }

    /**
     * rewrite safeAttributes
     *
     * @date: 2020-06-17 16:17
     * @return array|string[]
     */
    public function safeAttributes()
    {
        return $this->attributes();
    }

    /**
     * @date: 2020-07-09 14:37
     * @return array|mixed
     * @throws \ReflectionException
     */
    public function jsonSerialize()
    {
        return $this->toArray();
    }

    /**
     * @date: 2020-07-09 14:37
     * @return string
     * @throws \ReflectionException
     */
    public function toJson()
    {
        return Json::encode($this->jsonSerialize());
    }

    /**
     * @date: 2020-07-09 14:36
     *
     * @param array $fields
     * @param array $expand
     * @param bool  $recursive
     *
     * @return array
     * @throws \ReflectionException
     */
    public function toArray(array $fields = [], array $expand = [], $recursive = true)
    {
        if ( ! $this->is_strict_load) {
            $this->setStrictValue();
            $this->is_strict_load = true;
        }
        return parent::toArray($fields, $expand, $recursive);
    }

    /**
     * @date: 2020-06-17 19:06
     *
     * @param string $name
     * @param mixed  $value
     *
     * @throws \yii\base\UnknownPropertyException
     */
    public function __set($name, $value)
    {
        $this->$name = $value;
        return parent::__set($name,
            $value); // TODO: Change the autogenerated stub
    }

    /**
     * 字符串命名风格转换
     *
     * @param      $name
     * @param int  $type
     * @param bool $ucfirst
     *
     * @return string
     */
    protected function parseName($name, $type = 0, $ucfirst = true)
    {
        if ($type) {
            $name = preg_replace_callback('/_([a-zA-Z])/', function ($match) {
                return strtoupper($match[1]);
            }, $name);

            return $ucfirst ? ucfirst($name) : lcfirst($name);
        }

        return strtolower(trim(preg_replace("/[A-Z]/", "_\\0", $name), "_"));
    }

    /**
     * @date: 2020-06-17 17:23
     *
     * @param $type
     *
     * @return int|string|null
     */
    protected function getDefaultValue($type)
    {
        // 参数未标注类型
        $type = (string)$type;
        if (0 === strlen($type)) {
            return null;
        }

        $value = null;
        switch ($type) {
            case 'int':
                $value = 0;
                break;
            case 'string':
                $value = '';
                break;
            case 'bool':
                $value = true;
                break;
            case 'float':
                $value = 0.00;
                break;
            case 'array':
                $value = [];
                break;
            case 'object':
                $value = (object)[];
                break;
            case 'null':
                $value = null;
                break;
            case 'resource':
                $value = null;
                break;
            default:
                if (class_exists($type)) {
                    $value = (object)[];
                }
                break;
        }

        return $value;
    }
}